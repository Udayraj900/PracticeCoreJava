package Strings;

import java.math.BigInteger;

public class Quiz1 {
	public static void main(String[] args) {
		int x = 0;

		int[] nums = { 1, 2, 3, 5 };

		for (int i : nums)
			switch (i) {
			case 1:
				x += i;
				break;
			case 5:
				x += i;
				break;
			default:
				x += i;
				break;
			case 2:
				x += i;
				break;
			}
		System.out.println(x);// 11
		/**
		 * When a case is matched in switch, its code and all the subsequent case code
		 * will run unless break is encountered.
		 */
		x = 0;
		for (int i : nums)
			switch (i) {
			case 1:
				x += i;
			case 5:
				x += i;
			default:
				x += i;
			case 2:
				x += i;
			}
		System.out.println(x);// 27

		/**
		 * Integer i1= -128 becomes Integer i1= Integer.valueOf(-128) In valueOf
		 * implementation, by default integers -128 to 127 are cached and the cached
		 * instance is returned for the integer.
		 */
		Integer i1 = -128;
		Integer i2 = -128;
		Integer i3 = 128;
		Integer i4 = 128;
		System.out.println((i1 == i2) + "," + (i3 == i4));// true,false

		if (true) {
			return;
		}

		System.out.println("Unreachable Statement"); // dead code

		while (true) {
			return;
		}

		// System.out.println("Unreachable Statement"); compile ime error
		/**
		 * The rules of unreachable code for different blocks like constructors,
		 * methods, try, catch, if, for, while etc are defined individually in the Java
		 * Language Specification. According to Java Language Specification, The
		 * conditional expression of If block will no be evaluated at compile time to
		 * decide the unreachable code. That’s why you will not get compile time error
		 * in case of if block. You can check the rules of unreachable code here.
		 */
	}
}
