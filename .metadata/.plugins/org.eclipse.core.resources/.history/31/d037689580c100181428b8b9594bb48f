package maps;

import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

public class HashMapSorting {

	public static void main(String[] args) {

		Map<String, String> codenames = new HashMap<String, String>();
		codenames.put("JDK 1.1.4", "Sparkler");
		codenames.put("J2SE 1.2", "Playground");
		codenames.put("J2SE 1.3", "Kestrel");
		codenames.put("J2SE 1.4", "Merlin");
		codenames.put("J2SE 5.0", "Tiger");
		codenames.put("Java SE 6", "Mustang");
		codenames.put("Java SE 7", "Dolphin");

		System.out.println("Map Without any sorting....");
		printMap(codenames);

		System.out.println("\nMap sort by Key in ascending order....");
		Map<String, String> atreeMap = new TreeMap<>(codenames);
		printMap(atreeMap);

		System.out.println("\nMap sort by Key in descending order....");
		Map<String, String> dtreeMap = new TreeMap<>(new Comparator<String>() {
			@Override
			public int compare(String s1, String s2) {
				return s2.compareTo(s1);
			}
		});
		dtreeMap.putAll(codenames);
		//printMap(dtreeMap);
		
		Map<String, String> dtreeMapLambda = new TreeMap<>(
				(Comparator<String>) (s1, s2) -> s2.compareTo(s1));
		dtreeMapLambda.putAll(codenames);
		printMap(dtreeMapLambda);
		
		System.out.println("\nMap sort by value in ascending order....");
		// printMap();
		Map<String, String> sortedMap = sortByValue(codenames);
		printMap(sortedMap);
		
		System.out.println("\nMap sort by value in descending order....");

	}

	private static Map<String, String> sortByValue(Map<String, String> unsortedMap) {

		  //1. Convert Map to List of Map
		List<Entry<String, String>> list = new LinkedList<>(unsortedMap.entrySet());
		
		 // 2. Sort list with Collections.sort(), 
		//provide a custom Comparator- Try switch the o1 o2 position for a different order
		Collections.sort(list, new Comparator<Entry<String, String>>() {

			@Override
			public int compare(Entry<String, String> s1, Entry<String, String> s2) {
				return s1.getValue().compareTo(s2.getValue());
			}
		});
		
		 // 3. Loop the sorted list and put it into a new insertion order Map LinkedHashMap
        Map<String, String> sortedMap = new LinkedHashMap<String, String>();
        for (Entry<String, String> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }
		return sortedMap;
	}

	public static <K, V> void printMap(Map<K, V> map) {
		for (Map.Entry<K, V> entry : map.entrySet()) {
			System.out.println(entry.getKey() + "----->" + entry.getValue());
		}
	}

}
