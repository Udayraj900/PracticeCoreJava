package Arrays;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

/*
 * Problem: Given n non negative integers a1,a2,...aN, where each represents a point at coordinate (i,ai). 
 * n vertical lines are drawn such that the two end-points of line i is at (i,ai) and (i,0). Find two lines, which 
 * together with X-axis forms a container, such that the container contains the most water.
 *  
 * n>=2
 * 
 */
public class ContainerWithMostWater {

	public static void main(String[] args) {

	int [] height = {1,4,17,2,19,11,3};
	int maxArea = maxArea(height);
	System.out.println(maxArea);
	}

	public static int maxArea(int[] height) {
		int left = 0;
		int right = height.length - 1;
		int maxArea = 0;
		int maxLeft = 0;
		int maxRight = 0 ;
		int prevMaxArea = 0;
		
		while(left < right) {
			maxArea = Math.max(maxArea, Math.min(height[left], height[right]) * (right - left));
			System.out.println("max area: "+maxArea);
			System.out.println("Prev max area: "+prevMaxArea);
			if(height[left] < height[right]) {
				if(maxArea != prevMaxArea) {
					maxLeft = left;
					maxRight = right;
				}
				System.out.println("left :"+left);
				System.out.println("right :"+right);
				left++;
			}
			else {
					
				
				System.out.println("left :"+left);
				System.out.println("right :"+right);
				right--;
				
				
			}
			prevMaxArea = maxArea;	
		}
		System.out.println(maxLeft);
		System.out.println(maxRight);
		return maxArea;
	}
}
